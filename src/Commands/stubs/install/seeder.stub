<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use Spatie\Permission\PermissionRegistrar;
use Illuminate\Support\Facades\Auth;

class LaravueSeeder extends Seeder
{
    /**
     * Create the initial roles and permissions.
     *
     * @return void
     */
    public function run()
    {
        // Force spatie to use guard api
        Auth::shouldUse('api');

        // Reset cached roles and permissions
        app()[PermissionRegistrar::class]->forgetCachedPermissions();

        // create permissions
        $create_users = Permission::create(['name' => 'c-users', 'label' => 'Create User']);
        $read_users = Permission::create(['name' => 'r-users', 'label' => 'Read User']);
        $edit_users = Permission::create(['name' => 'u-users', 'label' => 'Update User']);
        $delete_users = Permission::create(['name' => 'd-users', 'label' => 'Delete User']);
        $print_users = Permission::create(['name' => 'p-users', 'label' => 'Print User']);

        $create_roles = Permission::create(['name' => 'c-roles', 'label' => 'Create Role']);
        $read_roles = Permission::create(['name' => 'r-roles', 'label' => 'Read Role']);
        $update_roles = Permission::create(['name' => 'u-roles', 'label' => 'Update Role']);
        $delete_roles = Permission::create(['name' => 'd-roles', 'label' => 'Delete Role']);
        $print_roles = Permission::create(['name' => 'p-roles', 'label' => 'Print Role']);

        $create_permissions = Permission::create(['name' => 'c-permissions', 'label' => 'Create Permissions']);
        $read_permissions = Permission::create(['name' => 'r-permissions', 'label' => 'Read Permissions']);
        $edit_permissions = Permission::create(['name' => 'u-permissions', 'label' => 'Update Permissions']);
        $delete_permissions = Permission::create(['name' => 'd-permissions', 'label' => 'Delete Permissions']);
        $print_permissions = Permission::create(['name' => 'p-permissions', 'label' => 'Print Permissions']);

        // {{ laravue-insert:permissions }}

        // Menu Permissions
        $access_dashboad_menu = Permission::create(['name' => "r-m-dashboard", 'label' => 'Access Dashboard Menu']);
        $access_tool_menu = Permission::create(['name' => "r-m-tool", 'label' => 'Access Tool Menu']);
        $access_report_menu = Permission::create(['name' => "r-m-report", 'label' => 'Access Report Menu']);
        // {{ laravue-insert:menu }}

        // create aditional permissions
        $update_roles_users_permissions = Permission::create(['name' => 'u-roles-users', 'label' => 'Access User Roles']);
        $update_users_permissions = Permission::create(['name' => 'u-permissions-users', 'label' => 'Access User Permissions']);
        $update_roles_permissions = Permission::create(['name' => 'u-permissions-roles', 'label' => 'Access Roles Permissions']);
        $update_fileavatars_permissions = Permission::create(['name' => 'u-fileavatars', 'label' => 'Update User Avatar Image']);
        $update_avatars_permissions = Permission::create(['name' => 'u-avatar', 'label' => 'Update User Avatar']);

        // create roles and assign existing permissions
        $roleAdmin = Role::create(['name' => 'Administrador', 'guard_name' => 'api']);
        $roleAdmin->givePermissionTo(Permission::all());

        // create users
        $user = \App\Models\User::where('email', '{{ seederUserEmail }}')->first();

        if (isset($user)) {
            $user->assignRole($roleAdmin);
        }
    }
}
