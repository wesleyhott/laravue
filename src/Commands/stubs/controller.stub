<?php

namespace App\Http\Controllers\Admin{{ schemaNamespace }};

use App\Http\Controllers\Controller;
use Illuminate\Database\QueryException;
use App\Contracts\{{ model }}ServiceContract;
use App\Http\Requests\Admin\Add{{ model }}Request;
use App\Http\Requests\Admin\Update{{ model }}Request;

class {{ model }}Controller extends Controller
{
    private $service;

    /**
     * {{ model }}Controller constructor.
     * @param {{ model }}ServiceContract $service
     */

    public function __construct({{ model }}ServiceContract $service)
    {
        $this->service = $service;
    }

    public function index()
    {
        ${{ modelVar }} = $this->service->all();
        return view('admin{{ schemaRoute }}.index', compact('{{ modelVar }}'));
    }

    public function edit(string $id)
    {
        ${{ modelVar }} = $this->service->find((int) $id);

        return view('admin{{ schemaRoute }}.edit', compact('{{ modelVar }}'));
    }

    public function update(Update{{ model }}Request $request, int $id)
    {
        try {
            $fields = collect($request->all())->only([{{ fields }}])->all();
            $this->service->update((int)$id, $fields);
            return redirect(route('admin{{ schemaRoute }}.index'))->with('success', '{{ title }} successfully updated');
        } catch (\Exception $e) {
            return redirect(route('admin{{ schemaRoute }}.index'))->withError($e->getMessage());
        }
    }

    public function store(Add{{ model }}Request $request)
    {
        try {
            $fields = collect($request->all())->only(['field1', 'field2', 'fieldN'])->all();
            $fields = collect($request->all())->only([{{ fields }}])->all();
            $this->service->store($fields);
            return redirect(route('admin{{ schemaRoute }}.index'))->with('success', '{{ title }} successfully updated');
        } catch (\Exception $e) {
            $message = $e->getMessage();

            if ($e instanceof QueryException && $e->errorInfo[1] == 1062) {
                $message = "{{ model }} already exists";
            }

            return redirect(route('admin{{ schemaRoute }}.index'))->with('error', $message);
        }
    }

    public function delete(int $id)
    {
        try {
            $this->service->delete($id);
            return response()->json(['success' => true, 'message' => '{{ title }} deleted successfully']);
        } catch (\Exception $e) {
            error_log($e->getMessage());
            return response()->json(['success' => true, 'message' => 'Delete error. ' . $e->getMessage()]);
        }
    }
}
